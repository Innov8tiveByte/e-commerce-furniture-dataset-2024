import pandas as pd
import re
import matplotlib.pyplot as plt

# File Paths

input_file = '/mnt/data/ecommerce_furniture_dataset_2024.csv'
cleaned_file = '/mnt/data/cleaned_furniture_dataset.csv'
summary_file = '/mnt/data/furniture_dataset_summary.csv'

# Step 1: Load the Dataset
print("Loading dataset...")
df = pd.read_csv(input_file)

# Step 2: Clean `tagtext` (Shipping Fees) Column
print("Cleaning 'tagtext' column...")

def clean_shipping_fees(value):
    """
    Cleans the 'tagtext' column:
    - Converts 'Free Shipping' to 0.
    - Extracts numeric values from text like 'Shipping + 15'.
    - Treats invalid/missing values as 0.
    """
    if isinstance(value, str):
        if "free" in value.lower():
            return 0  # Free shipping case
        match = re.search(r'\d+', value)  # Extract numeric value
        if match:
            return float(match.group())
    # If already numeric or invalid, return 0
    try:
        return float(value)
    except ValueError:
        return 0

# Apply cleaning to 'tagtext' column
df['Shipping Fees'] = df['tagtext'].apply(clean_shipping_fees)

# Step 3: Clean Other Columns
print("Cleaning other columns...")

# Ensure numeric values for originalprice, price, and sold
df['originalprice'] = pd.to_numeric(df['originalprice'], errors='coerce').fillna(0)
df['price'] = pd.to_numeric(df['price'], errors='coerce').fillna(0)
df['sold'] = pd.to_numeric(df['sold'], errors='coerce').fillna(0)

# Step 4: Calculate Additional Metrics
print("Calculating additional metrics...")
df['Discount (%)'] = round((df['originalprice'] - df['price']) / df['originalprice'] * 100, 2)
df['Total Revenue'] = df['price'] * df['sold']
df['Total Price'] = df['price'] + df['Shipping Fees']

# Step 5: Remove Duplicates
print("Removing duplicates...")
df_cleaned = df.drop_duplicates()

# Step 6: Save Cleaned Dataset
print("Saving cleaned dataset...")
df_cleaned.to_csv(cleaned_file, index=False)

# Step 7: Analyze Data

# 7.1 Top 10 Products by Revenue
top_revenue_products = df_cleaned.nlargest(10, 'Total Revenue')[['productTitle', 'Total Revenue']]
print("\nTop 10 Products by Revenue:")
print(top_revenue_products)

# 7.2 Summary Statistics for Shipping Fees
shipping_summary = df_cleaned['Shipping Fees'].describe()
print("\nShipping Fees Summary:")
print(shipping_summary)

# Save Summary
summary = {
    "Top Revenue Products": top_revenue_products.to_dict(),
    "Shipping Summary": shipping_summary.to_dict()
}
pd.DataFrame(summary).to_csv(summary_file)

# Step 8: Visualize Data

# 8.1 Bar Chart: Top Products by Revenue
plt.figure(figsize=(10, 5))
plt.bar(top_revenue_products['productTitle'], top_revenue_products['Total Revenue'], color='skyblue')
plt.title("Top 10 Products by Revenue")
plt.xlabel("Product Name")
plt.ylabel("Revenue")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.savefig('/mnt/data/top_revenue_products_chart.png')
plt.show()

# 8.2 Histogram: Distribution of Shipping Fees
plt.figure(figsize=(8, 5))
plt.hist(df_cleaned['Shipping Fees'], bins=20, color='lightgreen', edgecolor='black')
plt.title("Distribution of Shipping Fees")
plt.xlabel("Shipping Fees")
plt.ylabel("Frequency")
plt.tight_layout()
plt.savefig('/mnt/data/shipping_fees_distribution.png')
plt.show()

# Step 9: Save Final Outputs
print("\nFinal files saved:")
print(f"1. Cleaned dataset: {cleaned_file}")
print(f"2. Summary file: {summary_file}")
print(f"3. Top Revenue Products Chart: /mnt/data/top_revenue_products_chart.png")
print(f"4. Shipping Fees Distribution Chart: /mnt/data/shipping_fees_distribution.png")

This code will predict sales (sold) based on product price, original price, shipping fees, and other features.

import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Load dataset
file_path = "/mnt/data/ecommerce_furniture_dataset_2024 (1).csv"
df = pd.read_csv(file_path)

# Clean 'tagtext' (Shipping Fees) Column
def clean_shipping_fees(value):
    if isinstance(value, str):
        if "free" in value.lower():
            return 0  # Free shipping
        match = re.search(r'\d+', value)
        if match:
            return float(match.group())
    try:
        return float(value)
    except ValueError:
        return 0

df['Shipping Fees'] = df['tagtext'].apply(clean_shipping_fees)

# Convert price-related columns to numeric
df['originalprice'] = pd.to_numeric(df['originalprice'], errors='coerce').fillna(0)
df['price'] = pd.to_numeric(df['price'], errors='coerce').fillna(0)
df['sold'] = pd.to_numeric(df['sold'], errors='coerce').fillna(0)

# Create new feature columns
df['Discount (%)'] = round((df['originalprice'] - df['price']) / df['originalprice'] * 100, 2)
df['Total Revenue'] = df['price'] * df['sold']
df['Total Price'] = df['price'] + df['Shipping Fees']

# Drop duplicate rows
df_cleaned = df.drop_duplicates()

# Select Features and Target
features = ['originalprice', 'price', 'Shipping Fees', 'Discount (%)', 'Total Price']
target = 'sold'

X = df_cleaned[features]
y = df_cleaned[target]

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize Data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train ML Model (Random Forest Regressor)
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# Predictions
y_pred = model.predict(X_test_scaled)

# Model Evaluation
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print("Model Performance:")
print(f"Mean Absolute Error (MAE): {mae}")
print(f"Root Mean Squared Error (RMSE): {rmse}")
print(f"RÂ² Score: {r2}")

# Save Predictions
df_predictions = pd.DataFrame({'Actual Sales': y_test, 'Predicted Sales': y_pred})
df_predictions.to_csv('/mnt/data/furniture_sales_predictions.csv', index=False)

print("Predictions saved to: /mnt/data/furniture_sales_predictions.csv")

